class Motor:
    def __init__(self):
        pass
    def push():
        print("hey")

      # ADDED Code
# This code is one of the first steps to allow the robot
# moveself.
#First we will need to figure out how to classify the two motors
# Next program into the motors the step and distance it will takeself.
# Make create a function with automation offself.
#Reference: https://medium.com/@Keithweaver_/controlling-stepper-motors-using-python-with-a-raspberry-pi-b3fbd482f886
# https://www.raspberrypi-spy.co.uk/2012/07/stepper-motor-control-in-python/


# SPECS of Electronic system used in here
# x2 Stepper Motor NEMA-17

#Import neccesary functions
from Adafruit_MotorHAT import Adafruit_MotorHAT, Adafruit_DCMotor

import os
import sys
import RPi.GPIO as GPIO
import time
from adafruit_motorhat import Motorkit
from adafruit_motor import stepper

kit = Motorkit()

# create a default object, no changes to I2C address or frequency
mh = adafruit_motorHAT(addr=0x60)

# can import the steppers to get exact stepper and postion.
class Motor:
    #import i2c function for the address of each motor
    def __init__(self,address=0x60):
        self.motor1 = None
        self.motor2 = None
        self.motor3 = None

    kit.stepper1.onestep()
    # basic function to do one single coil step.

    # amount of times the motor will rotate
    #range is from 0 to 200.
    def wakeup():

    def stop(i=0):
        #Identify step count as 0.
        time.sleep(2)
    def left(i):

    def right(i):
        # Will have to move the coils in specific directions.
    def forward(i):
       # for i in range(0,200):
         for i in range(200):
            kit.stepper1.onestep(style=stepper.FORWARD)
            print("Forward March")

    def backward(i):
        for i in range(0,200):
            kit.stepper1.onestep(style=stepper.BACKWARD)
        #if i= -200:
            #print("Umm, backing it up")

        print("hey, we are moving!")
