from smbus2 import SMBusWrapper
import math
import numpy as np

class DoF:
    WHO_AM_I_M = 0x0F

    MAG_CTRL_1 = 0x20
    MAG_CTRL_2 = 0x21
    MAG_CTRL_3 = 0x22
    MAG_CTRL_4 = 0x23
    MAG_CTRL_5 = 0x24

    STATUS = 0x27

    MAG_OUT_XL = 0x28
    MAG_OUT_XH = 0x29
    MAG_OUT_YL = 0x2A
    MAG_OUT_YH = 0x2B
    MAG_OUT_ZL = 0x2C
    MAG_OUT_ZH = 0x2D

    CAL_M_4G = 4.0/32768.0
    SNS_M_4G = 0.00014

    DEC_BO = -8.58



    def __init__(self,address):
        self.id = address
        self.heading = -1

        with SMBusWrapper(1) as bus:
            iam = bus.read_byte_data(self.id, self.WHO_AM_I_M)

        if iam == 61:
            print("Succesfully connected to magnetometer.")

            with SMBusWrapper(1) as bus:
                bus.write_byte_data(self.id,0x22,0b00000000)
                bus.write_byte_data(self.id,0x20,0b11011100)
                bus.write_byte_data(self.id,0x21,0b01000000)
        else:
            print("Failed to connect.")


    def getHeading(self):
        self.magRead()
        '''
        heading = 180 * math.atan2(self.y,self.x)/math.pi

        if heading < 0:
            heading += 360
        '''
        if self.y == 0:
            if self.x < 0:
                heading = math.pi
            else:
                heading = 0
        else:
            heading = math.atan2(self.y,self.x)
        '''
        heading -= self.DEC_BO * math.pi / 180
        '''
        print("Heading: " + str(heading))

        if heading > math.pi:
          heading -= (2 * math.pi)
          print("Heading > math.pi")

        elif heading < -math.pi:
            heading += (2 * math.pi)
            print("Heading < math.pi")

        heading *= 180.0 / math.pi
        
        return heading

    def parse(self,data):
        x = np.int16(data[0] | (data[1] << 8))*self.SNS_M_4G
        y = np.int16(data[2] | (data[3] << 8))*self.SNS_M_4G
        z = np.int16(data[4] | (data[5] << 8))*self.SNS_M_4G
        print("x: " +str(x) + "y: " + str(y) + "z: " + str(z))

        return x, y , z

    def magRead(self):

        with SMBusWrapper(1) as bus:
            data = bus.read_i2c_block_data(self.id,self.MAG_OUT_XL,6)

        print(data)

        self.x,self.y,self.z = self.parse(data)


    # def magCalib(self):
    #     with SMBusWrapper(1) as bus:
